name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/sdk-python/**'
      - 'packages/decoder-python/**'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/sdk-python/**'
      - 'packages/decoder-python/**'
      - '.github/workflows/python-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            pip-

  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        package: [sdk-python, decoder-python]
        python-version: ['3.9']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety

      - name: Install package dependencies
        run: |
          cd packages/${{ matrix.package }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            pip install -e ".[dev]" || pip install -e .
          fi

      - name: Run Black formatter check
        run: |
          cd packages/${{ matrix.package }}
          black --check --diff .
        continue-on-error: false

      - name: Run isort import sorter check
        run: |
          cd packages/${{ matrix.package }}
          isort --check-only --diff .
        continue-on-error: false

      - name: Run flake8 linter
        run: |
          cd packages/${{ matrix.package }}
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: false

      - name: Run mypy type checker
        run: |
          cd packages/${{ matrix.package }}
          mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

      - name: Run bandit security linter
        run: |
          cd packages/${{ matrix.package }}
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true
        continue-on-error: true

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-${{ matrix.package }}
          path: packages/${{ matrix.package }}/bandit-report.json
          retention-days: 7

  test:
    name: Test Python Packages
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        package: [sdk-python, decoder-python]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd packages/${{ matrix.package }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          pip install -e ".[dev]" || pip install -e .
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: Run tests with pytest
        run: |
          cd packages/${{ matrix.package }}
          python -m pytest -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        env:
          CI: true

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          directory: packages/${{ matrix.package }}
          flags: python,${{ matrix.package }}
          name: ${{ matrix.package }}-coverage
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.package }}-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            packages/${{ matrix.package }}/htmlcov/
            packages/${{ matrix.package }}/coverage.xml
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        package: [sdk-python, decoder-python]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Install package dependencies
        run: |
          cd packages/${{ matrix.package }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          pip install -e . || true

      - name: Run safety check for known vulnerabilities
        run: |
          cd packages/${{ matrix.package }}
          safety check --json --output safety-report.json || true
          safety check || true
        continue-on-error: true

      - name: Run bandit security scan
        run: |
          cd packages/${{ matrix.package }}
          bandit -r . -f json -o bandit-security-report.json || true
          bandit -r . || true
        continue-on-error: true

      - name: Run semgrep security scan
        run: |
          cd packages/${{ matrix.package }}
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto . || true
        continue-on-error: true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/safety-report.json
            packages/${{ matrix.package }}/bandit-security-report.json
            packages/${{ matrix.package }}/semgrep-report.json
          retention-days: 30

  build:
    name: Build Python Packages
    runs-on: ubuntu-latest
    needs: [setup, lint]
    strategy:
      matrix:
        package: [sdk-python, decoder-python]
        python-version: ['3.9', '3.11']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Install package dependencies
        run: |
          cd packages/${{ matrix.package }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          pip install -e . || true

      - name: Build package
        run: |
          cd packages/${{ matrix.package }}
          python -m build

      - name: Check build artifacts
        run: |
          cd packages/${{ matrix.package }}
          ls -la dist/
          twine check dist/*

      - name: Test installation from wheel
        run: |
          cd packages/${{ matrix.package }}
          pip install dist/*.whl --force-reinstall
          cd ../../
          python -c "import $(echo ${{ matrix.package }} | sed 's/-/_/g' | sed 's/sdk_python/clip_sdk/' | sed 's/decoder_python/decoder_lib/'); print('✅ Package imported successfully')"

      - name: Upload build artifacts
        if: matrix.python-version == '3.9'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-build-${{ github.sha }}
          path: packages/${{ matrix.package }}/dist/
          retention-days: 7

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd packages/sdk-python
          pip install -e ".[dev]"
          cd ../decoder-python
          pip install -e ".[dev]"

      - name: Run integration tests
        run: |
          echo "Running integration tests across Python packages..."
          
          # Test CLIP SDK functionality
          cd packages/sdk-python
          python -c "from clip_sdk import CLIPValidator, CLIPFetcher, CLIPObject; print('✅ All main classes imported successfully'); validator = CLIPValidator(); print('✅ CLIPValidator created'); fetcher = CLIPFetcher(); print('✅ CLIPFetcher created'); clip_data = {'@context': 'https://clipprotocol.org/v1', 'type': 'Venue', 'id': 'clip:test:venue:123', 'name': 'Test Venue', 'description': 'Integration test venue'}; clip_obj = CLIPObject(**clip_data); print('✅ CLIPObject created:', clip_obj.name)"
          
          # Test decoder library
          cd ../decoder-python
          python -c "from decoder_lib import DecodeOptions, EncodeOptions, get_library_info; print('✅ Decoder library imports successful'); info = get_library_info(); print('✅ Library info:', info['name'], info['version']); options = DecodeOptions(format='qr'); print('✅ DecodeOptions created:', options.format)"

  publish-check:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    needs: [build, test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Check PyPI readiness
        run: |
          for package in sdk-python decoder-python; do
            echo "Checking packages/$package for PyPI readiness..."
            cd packages/$package
            
            # Build package
            python -m build
            
            # Check with twine
            twine check dist/*
            
            # Validate metadata
            python -c "import os, json; print('✅ pyproject.toml found' if os.path.exists('pyproject.toml') else '❌ pyproject.toml missing')"
            
            cd ../..
          done

      - name: Simulate PyPI upload (dry run)
        run: |
          for package in sdk-python decoder-python; do
            echo "Simulating PyPI upload for packages/$package..."
            cd packages/$package
            # This would be: twine upload --repository testpypi dist/*
            echo "twine upload --repository testpypi dist/* --dry-run"
            cd ../..
          done

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install memory-profiler pytest-benchmark
          cd packages/sdk-python
          pip install -e ".[dev]"

      - name: Run performance tests
        run: |
          cd packages/sdk-python
          python -c "import time; from clip_sdk import CLIPValidator, CLIPObject; start_time = time.time(); [CLIPObject(**{'@context': 'https://clipprotocol.org/v1', 'type': 'Venue', 'id': f'clip:test:venue:{i}', 'name': f'Test Venue {i}', 'description': f'Performance test venue {i}'}) for i in range(100)]; end_time = time.time(); print(f'✅ Created 100 CLIP objects in {end_time - start_time:.3f} seconds')"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Lint status: ${{ needs.lint.result }}"
          echo "Test status: ${{ needs.test.result }}"
          echo "Build status: ${{ needs.build.result }}"
          echo "Security status: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Python CI pipeline failed"
            exit 1
          else
            echo "✅ Python CI pipeline passed"
          fi 