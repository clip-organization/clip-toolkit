name: TypeScript CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/encoder-cli/**'
      - 'packages/decoder-lib/**'
      - 'packages/validator-core/**'
      - '.github/workflows/typescript-ci.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'eslint.config.js'
      - 'tsconfig*.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/encoder-cli/**'
      - 'packages/decoder-lib/**'
      - 'packages/validator-core/**'
      - '.github/workflows/typescript-ci.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'eslint.config.js'
      - 'tsconfig*.json'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        run: npm ci

  lint:
    name: Lint TypeScript Code
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        package: [encoder-cli, decoder-lib, validator-core]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          npm run lint --if-present
        continue-on-error: false

      - name: Check TypeScript types for ${{ matrix.package }}
        run: |
          # Use TypeScript project references for proper module resolution
          cd packages/${{ matrix.package }}
          npx tsc --build --force
        continue-on-error: false

  test:
    name: Test TypeScript Packages
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
        package: [encoder-cli, decoder-lib, validator-core]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          npm test --if-present
        env:
          CI: true

      - name: Generate coverage report for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          npm run test:coverage --if-present
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          directory: packages/${{ matrix.package }}
          flags: typescript,${{ matrix.package }}
          name: ${{ matrix.package }}-coverage
          fail_ci_if_error: false

  build:
    name: Build TypeScript Packages
    runs-on: ubuntu-latest
    needs: [setup, lint]
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        package: [encoder-cli, decoder-lib, validator-core]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.package }}
        run: |
          # First ensure all packages are built in dependency order
          echo "Building all packages with TypeScript project references..."
          npm run build
          
          # Verify the specific package was built
          echo "Checking build output for ${{ matrix.package }}..."
          if [ -d "packages/${{ matrix.package }}/dist" ]; then
            echo "✓ Build successful for ${{ matrix.package }}"
            ls -la packages/${{ matrix.package }}/dist/
          else
            echo "✗ Build failed for ${{ matrix.package }} - no dist directory found"
            exit 1
          fi

      - name: Check build artifacts
        run: |
          cd packages/${{ matrix.package }}
          ls -la dist/ || echo "No dist directory found"
          
      - name: Test CLI functionality (encoder-cli only)
        if: matrix.package == 'encoder-cli' && matrix.node-version == '18.x'
        run: |
          cd packages/encoder-cli
          node dist/cli.js --help
          node dist/cli.js generate --type venue --output test-venue.json
          cat test-venue.json
          rm test-venue.json

      - name: Upload build artifacts
        if: matrix.node-version == '18.x'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-build-${{ github.sha }}
          path: packages/${{ matrix.package }}/dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run dependency vulnerability check
        run: |
          npx audit-ci --config .audit-ci.json
        continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Build all packages first
        run: |
          echo "Building all packages with TypeScript project references..."
          npm run build

      - name: Run integration tests
        run: |
          echo "Running integration tests across packages..."
          # Test encoder-cli with validator-core
          cd packages/encoder-cli
          node dist/cli.js generate --type venue --output ../../test-integration.json
          
          cd ../validator-core
          # Add integration test when validator-core is implemented
          
          # Cleanup
          rm -f ../../test-integration.json

  publish-check:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    needs: [build, test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages first
        run: |
          echo "Building all packages with TypeScript project references..."
          npm run build

      - name: Check package.json validity
        run: |
          for package in encoder-cli decoder-lib validator-core; do
            echo "Checking packages/$package/package.json..."
            cd packages/$package
            npm pack --dry-run
            cd ../..
          done

      - name: Verify build outputs
        run: |
          for package in encoder-cli decoder-lib validator-core; do
            echo "Verifying build for packages/$package..."
            cd packages/$package
            # Just verify the dist exists, don't rebuild
            if [ -d "dist" ]; then
              echo "✓ Build output exists for $package"
              ls -la dist/
            else
              echo "✗ No dist directory found for $package"
              exit 1
            fi
            cd ../..
          done

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Lint status: ${{ needs.lint.result }}"
          echo "Test status: ${{ needs.test.result }}"
          echo "Build status: ${{ needs.build.result }}"
          echo "Security status: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline passed"
          fi 